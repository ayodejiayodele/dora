name: Deployment Frequency

on:
  workflow_call:
    inputs: 
      owner:
        description: 'Repository owner'
        type: string
        required: true
        default: 'ayodejiayodele'
      repo:
        description: 'Repository name'
        type: string
        required: true
        default: 'dora'
      workflowName:
        description: 'Workflow name of yaml filename'
        required: true 
        type: string
      jobname:
        description: 'Job name responsible for production deployment'
        type: string
        required: false
      numberOfDays:
        description: 'Number of days to check for deployment frequency'
        type: number
        default: 7
        required: false
    secrets:
      githubToken:
        description: 'GitHub token, required for private repositories'
        required: false
  workflow_dispatch:
    inputs: 
      owner:
        description: 'Repository owner'
        type: string
        required: true
        default: 'ayodejiayodele'
      repo:
        description: 'Repository name'
        type: string
        required: true
        default: 'dora'
      workflowName:
        description: 'Workflow name of yaml filename'
        required: true 
        type: string
      jobname:
        description: 'Job name responsible for production deployment'
        type: string
        required: false
      numberOfDays:
        description: 'Number of days to check for deployment frequency'
        type: number
        default: 7
        required: false
jobs:
  calculate-frequency:
    runs-on: ubuntu-latest
    outputs:
      nonWorkingDays: ${{ steps.calculate-non-workingdays.outputs.nonWorkingDays }}
      productionRuns: ${{ steps.create-json.outputs.productionRuns }}
    steps:
      - name: calculate-non-workingdays
        id: calculate-non-workingdays
        run: |
          echo "Calculating non-working days"

          numberOfDays=${{ inputs.numberOfDays }}
          if [ -z "$numberOfDays" ]; then
            numberOfDays=7
            echo "Number of days is empty"
          elif [ $numberOfDays -lt 7 ]; then
            numberOfDays=7
            echo "Number of days is less than 7"
          fi

          currentDate=$(date +%Y-%m-%d)
          startDate=$(date -d "$currentDate - ${{ inputs.numberOfDays }} days" +%Y-%m-%d)

          echo "startDate: $startDate"
          echo "currentDate: $currentDate"
          echo "numberOfDays: ${{ inputs.numberOfDays }}"

          workingDaysApi=$(curl --request GET \
          --url 'https://prod-12.centralus.logic.azure.com:443/workflows/2024ff0c98b845a3979665f6e1a890c8/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=itl7PsdcSnc6SriLgOA7kJeKL-8M8zivcRtZnjVF6eM&country=AU&startdate='$startDate'&enddate='$currentDate)

          if [ -n "$workingDaysApi" ]; then
            echo "Working days API result: $workingDaysApi"
            nonWorkingDays=$(echo $workingDaysApi | jq '.result.non_working_days | length')
            echo "Non-working days: $nonWorkingDays"
          else
            echo "Working days API result is empty"
            nonWorkingDays=0
          fi
          echo "::set-output name=nonWorkingDays::$nonWorkingDays"
          echo "::set-output name=numberOfDays::$numberOfDays"

      - name: set-token
        id: set-token
        run: |
          if [ -z "${{ secrets.githubtoken }}" ]; then
            echo "githubtoken is not set"
            echo "::set-output name=githubtoken::${{ github.token }}"
          else
            echo "githubtoken is set"
            echo "::set-output name=githubtoken::${{ secrets.githubtoken }}"
          fi
      - name: 'Get Workflows and Jobs'
        uses: actions/github-script@v6
        with:
          github-token: ${{ steps.set-token.outputs.githubtoken }}
          script: |

            let productionWorkflowRuns = []
            let eligibleWorkflowsRuns = []
            let completionDates = []
            let uniqueDates = []
            let color = 'red'
            let owner = '${{ inputs.owner }}' ? '${{ inputs.owner }}' : context.repo.owner
            let repo = '${{ inputs.repo }}' ? '${{ inputs.repo }}' : context.repo.repo
            let numberOfDays =  parseInt("${{ steps.calculate-non-workingdays.outputs.numberOfDays }}")
            let workflowId = '${{ inputs.workflowName }}'
            let jobName = '${{ inputs.jobname }}'
            let numberOfWorkingDays = numberOfDays - parseInt('${{ steps.calculate-non-workingdays.outputs.nonWorkingDays }}')
            let resultsPerpage = 50
            let pageNumber = 1
            let workflowRuns = []
            let headSHAs = []

            //Remove numberOfDays from the current date
            let earliestDate = new Date()
            earliestDate.setDate(earliestDate.getDate() - numberOfDays)
            let dateToCompare = earliestDate.toISOString()
    
            const tempworkflowRuns = await github.rest.actions.listWorkflowRuns({
              owner: owner,
              repo: repo,
              workflow_id: workflowId,
              status: 'success',
              per_page: resultsPerpage
            });

            workflowRuns = workflowRuns.concat(tempworkflowRuns.data.workflow_runs)
            console.log(tempworkflowRuns.data.total_count)

            //loop until workflowRuns total count is reached
            while (workflowRuns.length < tempworkflowRuns.data.total_count) {
              pageNumber++
              const tempworkflowRuns = await github.rest.actions.listWorkflowRuns({
                owner: owner,
                repo: repo,
                workflow_id: workflowId,
                status: 'success',
                per_page: resultsPerpage,
                page: pageNumber
              });
              workflowRuns = workflowRuns.concat(tempworkflowRuns.data.workflow_runs)
              console.log("Page: " + pageNumber + " Total count: " + tempworkflowRuns.data.total_count)
            }

            //Get all workflow runs that were completed after the earliest date
            for (const workflowRun of workflowRuns) {
              if (workflowRun.status === 'completed' && workflowRun.updated_at > dateToCompare) {
                eligibleWorkflowsRuns.push(workflowRun)
                completionDates.push(workflowRun.updated_at.split('T')[0])
              }
            }

            //if no jobName is provided, add all eligibleWorkflowsRuns to productionWorkflowRuns
            if (jobName === '') {
              productionWorkflowRuns = eligibleWorkflowsRuns
            } else {
              //Get all workflow runs that have the jobName
              for (const workflowRun of eligibleWorkflowsRuns) {
                const jobs = await github.rest.actions.listJobsForWorkflowRun({
                  owner: owner,
                  repo: repo,
                  run_id: workflowRun.id,
                });

                for (const job of jobs.data.jobs) {
                  if (job.name === jobName) {
                    productionWorkflowRuns.push(workflowRun)
                  }
                }
              }
            }

            //uniqueDates = get unique dates from completionDates
            uniqueDates = completionDates.filter((date, index) => {
              return completionDates.indexOf(date) === index
            })

            let deploymentFrequency = uniqueDates.length / numberOfWorkingDays

            let deploymentFrequencyPercentage = Math.round(deploymentFrequency * 100)
            let deploymentFrequencyString = ''
            let doraClassification = ''
            
            if (deploymentFrequency > 1) {
              deploymentFrequencyString = 'Multiple deployments per day'
              color = 'green'
              doraClassification = 'Elite'
            } else if (deploymentFrequency == 1) {
              deploymentFrequencyString = 'Daily'
              color = 'green'
              doraClassification = 'Elite'
            } else {
              deploymentFrequency = 1 / deploymentFrequency
              deploymentFrequency = Math.round(deploymentFrequency)
              deploymentFrequencyString = 'Every ' + deploymentFrequency + ' days'
              if (deploymentFrequency < 5) { //More than once per week (5 working days)
                color = 'green'
                doraClassification = 'Elite'
              } else if (deploymentFrequency >= 5 && deploymentFrequency <= 30) { //Once per week to once per month
                color = 'yellow'
                doraClassification = 'High'
              } else if (deploymentFrequency > 30 && deploymentFrequency <= 180) { //Once per month to once every 6 months
                color = 'red'
                doraClassification = 'Medium'
              } else {
                color = 'red'
                doraClassification = 'Low'
              }
            }

            //Create a json file with the results
            const data = {
              "\"owner\"": "\"" + owner + "\"",
              "\"repo\"": "\"" + repo + "\"",
              "\"workflowName\"": "\"" + workflowId + "\"",
              "\"jobName\"": "\"" + jobName + "\"",
              "\"deploymentFrequency\"": "\"" + deploymentFrequencyString + "\"",
              "\"deploymentFrequencyPercentage\"": "\"" + deploymentFrequencyPercentage + "\"",
              "\"doraClassification\"": "\"" + doraClassification + "\"",
              "\"color\"": "\"" + color + "\"",
              "\"numberOfDays\"": numberOfDays,
              "\"numberOfWorkingDays\"": numberOfWorkingDays,
            //  "workflowRuns": productionWorkflowRuns,
              "\"uniqueDeploymentDates\"": uniqueDates.map(date => "\"" + date + "\"")
            }
            core.exportVariable('DEPLOYMENT_FREQUENCY', JSON.stringify(data, null, 2))
  
            //for each productionWorkflowRun, get the head SHA and add it to headSHAs
            for (const workflowRun of productionWorkflowRuns) {
              const prodWorkflowRun = {
                "\"id\"": "\"" + workflowRun.id + "\"",
                "\"title\"": "\"" + workflowRun.name + "\"",
                "\"head_sha\"": "\"" + workflowRun.head_sha + "\"",
                "\"updated_at\"": "\"" + workflowRun.updated_at + "\""
              }
              headSHAs.push(prodWorkflowRun)
            }
            core.exportVariable('PRODUCTION_WORKFLOW_RUNS', JSON.stringify(headSHAs, null, 2))

            let markdown = '## DORA Metric: Deployment Frequency\n' +
              '- Workflow Name: ' + workflowId + '\n' +
              '- Job Name: ' + jobName + '\n' +
              '- Deployment Frequency: ' + deploymentFrequencyString + '\n' +
              '- Deployment Frequency Percentage: ' + deploymentFrequencyPercentage + '%\n\n' +
              'You deployed _' + jobName + '_ **' + productionWorkflowRuns.length + ' times** in the last ' + numberOfDays + ' days.\n' +
              'Of these ' + numberOfDays + ' days, you deployed on **' + uniqueDates.length + ' days** excluding non-working days.\n\n' +
              'There are **' + numberOfWorkingDays + ' working days** in the last ' + numberOfDays + ' days.\n' +
              'This is **' + doraClassification + '** deployment frequency.\n\n' +
              '## DORA Classification: ' + doraClassification + '\n' +
              '![Deployment Frequency](https://badgen.net/badge/frequency/' + encodeURIComponent(deploymentFrequencyString) + '/' + color + '?icon=github&label=Deployment%20frequency)'

            core.exportVariable('MARKDOWN', markdown)

      - name: 'Create json and job summary'
        id: 'create-json'
        run: |
          echo "Creating json file"
          echo "${{ env.PRODUCTION_WORKFLOW_RUNS }}" > productionWorkflowRuns.json
          echo "::set-output name=productionRunsFile::productionWorkflowRuns.json"
          echo "${{ env.DEPLOYMENT_FREQUENCY }}" > deploymentFrequency.json
          echo "${{ env.MARKDOWN }}" >> $GITHUB_STEP_SUMMARY

      - name: 'Publish artifact'
        uses: actions/upload-artifact@v3.1.0
        with:
          name: deployment-frequency
          path: deploymentFrequency.json

      - name: 'Publish artifact production runs'
        uses: actions/upload-artifact@v3.1.0
        with:
          name: production-workflow-runs
          path: productionWorkflowRuns.json


  calculate-lead-time:
    runs-on: ubuntu-latest
    needs: calculate-frequency
    steps:
      - name: 'Download artifact'
        uses: actions/download-artifact@v2
        with:
          name: production-workflow-runs

      - name: set-token
        id: set-token
        run: |
          if [ -z "${{ secrets.githubtoken }}" ]; then
            echo "githubtoken is not set"
            echo "::set-output name=githubtoken::${{ github.token }}"
          else
            echo "githubtoken is set"
            echo "::set-output name=githubtoken::${{ secrets.githubtoken }}"
          fi
      
      - name: 'Calculate lead time for changes'
        id: calculate-lead-time
        uses: actions/github-script@v6
        with:
          github-token: ${{ steps.set-token.outputs.githubtoken }}
          script: |

            let workflowId = '${{ inputs.workflowName }}'
            let jobName = '${{ inputs.jobname }}'
            let owner = '${{ inputs.owner }}' ? '${{ inputs.owner }}' : context.repo.owner
            let repo = '${{ inputs.repo }}' ? '${{ inputs.repo }}' : context.repo.repo
            let totalLeadTime = 0
            let averageLeadTime = 0

            //workflowRunHeadSHAs = read json file productionWorkflowRuns.json and parse it
            const fs = require('fs');
            const workflowRunHeadSHAs = JSON.parse(fs.readFileSync('productionWorkflowRuns.json', 'utf8'));

            //for each headSHA in workflowRunHeadSHAs, get commit details and calculate lead time
            const commitRecords = []
            for (const run of workflowRunHeadSHAs) {
              const commitDetails = await github.rest.repos.getCommit({
                owner: owner,
                repo: repo,
                ref: run.head_sha,
              });

              //if commitDetails is not null and commitDetails.parents.length = 1, calculate lead time
              if (commitDetails && commitDetails.data.parents.length == 1) {
                const leadTime = (new Date(run.updated_at) - new Date(commitDetails.data.commit.committer.date)) / 1000 / 60 / 60
                const commitRecord = {
                  "\"run_id\"": "\"" + run.id + "\"",
                  "\"title\"": "\"" + run.title + "\"",
                  "\"commit_sha\"": "\"" + run.head_sha + "\"",
                  "\"committed_at\"": "\"" + commitDetails.data.commit.committer.date + "\"",
                  "\"updated_at\"": "\"" + run.updated_at + "\"",
                  "\"lead_time\"": "\"" + leadTime + " hours\""
                }
                totalLeadTime += leadTime
                commitRecords.push(commitRecord)
              } else if (commitDetails && commitDetails.data.parents.length > 1) {
                //if commitDetails is not null and commitDetails.parents.length > 1, calculate lead time for each parent
                for (const parent of commitDetails.data.parents) {
                  const parentCommitDetails = await github.rest.repos.getCommit({
                    owner: owner,
                    repo: repo,
                    ref: parent.sha,
                  });
                  const leadTime = (new Date(run.updated_at) - new Date(parentCommitDetails.data.commit.committer.date)) / 1000 / 60 / 60

                  const commitRecord = {
                    "\"run_id\"": "\"" + run.id + "\"",
                    "\"title\"": "\"" + run.title + "\"",
                    "\"commit_sha\"": "\"" + parent.sha +" (parent)\"",
                    "\"committed_at\"": "\"" + parentCommitDetails.data.commit.committer.date + "\"",
                    "\"updated_at\"": "\"" + run.updated_at + "\"",
                    "\"lead_time\"": "\"" + leadTime + " hours\""
                  }
                  totalLeadTime += leadTime
                  commitRecords.push(commitRecord)
                }
              }
              core.exportVariable('LEAD_TIME', JSON.stringify(commitRecords, null, 2))
            }

            console.log("Total lead time: " + totalLeadTime + " hours")
            console.log("Number of commits: " + commitRecords.length)
            averageLeadTime = totalLeadTime / commitRecords.length
            console.log("Average lead time: " + averageLeadTime + " hours")

            let doraClassification = ''
            let color = ''
            let leadTimeString = ''

            if (averageLeadTime <= 1) {
              doraClassification = 'Elite'
              color = 'green'
              leadTimeString = 'Less than one hour'
            } else if (averageLeadTime > 1 && averageLeadTime <= 24) {
              doraClassification = 'Elite'
              color = 'green'
              leadTimeString = '1 day'
            }else if (averageLeadTime > 24 && averageLeadTime <= 168) { // 168 hours = 7 days
              doraClassification = 'High'
              color = 'green'
              leadTimeString = averageLeadTime / 24 + ' days'
            } else if (averageLeadTime > 168 && averageLeadTime <= 720) { //30 days
              doraClassification = 'Medium'
              color = 'yellow'
              leadTimeString = averageLeadTime / 24 + ' days'
            } else if (averageLeadTime > 720 && averageLeadTime <= 4320) { //6 months
              doraClassification = 'Medium'
              color = 'yellow'
              leadTimeString = averageLeadTime / 24 / 30 + ' months'
            } else { // > 6 months
              doraClassification = 'Low'
              color = 'red'
              leadTimeString = 'More than 6 months'
            }

            let markdown = '## DORA Metric: Lead Time for Changes\n' +
              '- Workflow Name: ' + workflowId + '\n' +
              '- Job Name: ' + jobName + '\n' +
              '- Number of workflow runs: ' + workflowRunHeadSHAs.length + '\n' +
              '- Number of commits: ' + commitRecords.length + '\n' +
              '- Average lead time: ' + averageLeadTime + ' hours\n\n' +
              '## DORA Classification: ' + doraClassification + '\n' +
              '![Lead Time](https://badgen.net/badge/leadtime/' + encodeURIComponent(leadTimeString) + '/' + color + '?icon=github&label=Lead%20time)' + '\n\n' 

            //for each commitRecord, add to markdown
            markdown += '| Run ID | Title | Commit SHA | Committed At | Updated At | Lead Time |\n' +
              '| --- | --- | --- | --- | --- | --- |\n'
            for (const commitRecord of commitRecords) {
              let commitText = commitRecord["\"commit_sha\""].indexOf("parent") > 1 ? commitRecord["\"commit_sha\""].substring(0,7).concat(" (parent)") : commitRecord["\"commit_sha\""].substring(0,7) 
              console.log(commitText)
              let commitLink = '[' + commitText + '](' + context.payload.repository.url + '/commit/' + commitRecord["\"commit_sha\""].replace(" (parent)","") + ')'
              console.log(commitLink)
              markdown += '| ' + commitRecord["\"run_id\""] + ' | ' + commitRecord["\"title\""] + ' | ' + commitLink + ' | ' + commitRecord["\"committed_at\""] + ' | ' + commitRecord["\"updated_at\""] + ' | ' + commitRecord["\"lead_time\""] + ' |\n'
            }
            markdown +=  '| | | | | **Total Lead Time** | ' + totalLeadTime + ' hours |\n' +
              '| | | | | **Average Lead Time** | ' + averageLeadTime + ' hours |\n'

            markdown = markdown.replace(/"/g, '')

            core.exportVariable('MARKDOWN', markdown)

      - name: 'Create json and job summary'
        run: |
          echo "Creating json file"
          echo "${{ env.MARKDOWN }}" >> $GITHUB_STEP_SUMMARY

      - name: 'Publish artifact'
        uses: actions/upload-artifact@v3.1.0
        with:
          name: lead-time
          path: leadTime.json
