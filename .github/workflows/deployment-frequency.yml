name: Deployment Frequency

on:
  workflow_call:
    inputs: 
      owner:
        description: 'Repository owner'
        type: string
        required: true
        default: 'ayodejiayodele'
      repo:
        description: 'Repository name'
        type: string
        required: true
        default: 'dora'
      workflowName:
        description: 'Workflow name of yaml filename'
        required: true 
        type: string
      jobname:
        description: 'Job name responsible for production deployment'
        type: string
        required: false
      numberOfDays:
        description: 'Number of days to check for deployment frequency'
        type: number
        default: 7
        required: false
    secrets:
      githubToken:
        description: 'GitHub token, required for private repositories'
        required: false
  workflow_dispatch:
    inputs: 
      owner:
        description: 'Repository owner'
        type: string
        required: true
        default: 'ayodejiayodele'
      repo:
        description: 'Repository name'
        type: string
        required: true
        default: 'dora'
      workflowName:
        description: 'Workflow name of yaml filename'
        required: true 
        type: string
      jobname:
        description: 'Job name responsible for production deployment'
        type: string
        required: false
      numberOfDays:
        description: 'Number of days to check for deployment frequency'
        type: number
        default: 7
        required: false
jobs:
  calculate-frequency:
    runs-on: ubuntu-latest
    steps:
      - name: calculate-non-workingdays
        id: calculate-non-workingdays
        run: |
          echo "Calculating non-working days"
          echo "Number of days specified: $INPUT_NUMBEROFDAYS"
          echo "Number 2: ${{ github.event.inputs.numberOfDays }}"
          numberOfDays=${{ github.event.inputs.numberOfDays }}
          if [ -z "$numberOfDays" ]; then
            numberOfDays=7
            echo "Number of days is empty"
          elif [ $numberOfDays -lt 7 ]; then
            numberOfDays=7
            echo "Number of days is less than 7"
          fi

          currentDate=$(date +%Y-%m-%d)
          startDate=$(date -d "$currentDate - ${{ github.event.inputs.numberOfDays }} days" +%Y-%m-%d)

          echo "startDate: $startDate"
          echo "currentDate: $currentDate"
          echo "numberOfDays: ${{ github.event.inputs.numberOfDays }}"

          workingDaysApi=$(curl --request GET \
          --url 'https://working-days.p.rapidapi.com/list_non_working_days?country_code=AU&start_date='$startDate'&end_date='$currentDate \
          --header 'X-RapidAPI-Host: working-days.p.rapidapi.com' \
          --header 'X-RapidAPI-Key: ${{ secrets.WORKING_DAYS_API_KEY }}')

          if [ -n "$workingDaysApi" ]; then
            echo "Working days API result: $workingDaysApi"
            nonWorkingDays=$(echo $workingDaysApi | jq '.result.non_working_days | length')
            echo "Non-working days: $nonWorkingDays"
          else
            echo "Working days API result is empty"
            nonWorkingDays=0
          fi
          echo "::set-output name=nonWorkingDays::$nonWorkingDays"
          echo "::set-output name=numberOfDays::$numberOfDays"

      - name: set-token
        id: set-token
        run: |
          if [ -z "${{ secrets.githubtoken }}" ]; then
            echo "githubtoken is not set"
            echo "::set-output name=githubtoken::${{ github.token }}"
          else
            echo "githubtoken is set"
            echo "::set-output name=githubtoken::${{ secrets.githubtoken }}"
          fi
      - name: 'Get Workflows and Jobs'
        uses: actions/github-script@v6
        with:
          github-token: ${{ steps.set-token.outputs.githubtoken }}
          script: |

            let productWorkflowRuns = []
            let eligibleWorkflowsRuns = []
            let completionDates = []
            let uniqueDates = []
            let color = 'red'
            let owner = '${{ github.event.inputs.owner }}' ? '${{ github.event.inputs.owner }}' : context.repo.owner
            let repo = '${{ github.event.inputs.repo }}' ? '${{ github.event.inputs.repo }}' : context.repo.repo
            let numberOfDays =  parseInt("${{ steps.calculate-non-workingdays.outputs.numberOfDays }}")
            let workflowId = '${{ inputs.workflowName }}'
            let jobName = '${{ inputs.jobname }}'
            let numberOfWorkingDays = numberOfDays - parseInt('${{ steps.calculate-non-workingdays.outputs.nonWorkingDays }}')
            let resultsPerpage = 50
            let pageNumber = 1
            let workflowRuns = []

            //Remove numberOfDays from the current date
            let earliestDate = new Date()
            earliestDate.setDate(earliestDate.getDate() - numberOfDays)
            let dateToCompare = earliestDate.toISOString()
    
            const tempworkflowRuns = await github.rest.actions.listWorkflowRuns({
              owner: owner,
              repo: repo,
              workflow_id: workflowId,
              status: 'success',
              per_page: resultsPerpage
            });

            workflowRuns = workflowRuns.concat(tempworkflowRuns.data.workflow_runs)
            console.log(tempworkflowRuns.data.total_count)

            //loop until workflowRuns total count is reached
            while (workflowRuns.length < tempworkflowRuns.data.total_count) {
              pageNumber++
              const tempworkflowRuns = await github.rest.actions.listWorkflowRuns({
                owner: owner,
                repo: repo,
                workflow_id: workflowId,
                status: 'success',
                per_page: resultsPerpage,
                page: pageNumber
              });
              workflowRuns = workflowRuns.concat(tempworkflowRuns.data.workflow_runs)
              console.log("Page: " + pageNumber + " Total count: " + tempworkflowRuns.data.total_count)
            }

            //Get all workflow runs that were completed after the earliest date
            for (const workflowRun of workflowRuns) {
              if (workflowRun.status === 'completed' && workflowRun.updated_at > dateToCompare) {
                eligibleWorkflowsRuns.push(workflowRun)
                completionDates.push(workflowRun.updated_at.split('T')[0])
              }
            }

            //if no jobName is provided, add all eligibleWorkflowsRuns to productWorkflowRuns
            if (jobName === '') {
              productWorkflowRuns = eligibleWorkflowsRuns
            } else {
              //Get all workflow runs that have the jobName
              for (const workflowRun of eligibleWorkflowsRuns) {
                const jobs = await github.rest.actions.listJobsForWorkflowRun({
                  owner: owner,
                  repo: repo,
                  run_id: workflowRun.id,
                });

                for (const job of jobs.data.jobs) {
                  if (job.name === jobName) {
                    productWorkflowRuns.push(workflowRun)
                  }
                }
              }
            }

            //uniqueDates = get unique dates from completionDates
            uniqueDates = completionDates.filter((date, index) => {
              return completionDates.indexOf(date) === index
            })

            let deploymentFrequency = uniqueDates.length / numberOfWorkingDays

            let deploymentFrequencyPercentage = Math.round(deploymentFrequency * 100)
            let deploymentFrequencyString = ''
            let doraClassification = ''
            
            if (deploymentFrequency > 1) {
              deploymentFrequencyString = 'Multiple deployments per day'
              color = 'green'
              doraClassification = 'Elite'
            } else if (deploymentFrequency == 1) {
              deploymentFrequencyString = 'Daily'
              color = 'green'
              doraClassification = 'Elite'
            } else {
              deploymentFrequency = 1 / deploymentFrequency
              deploymentFrequency = Math.round(deploymentFrequency)
              deploymentFrequencyString = 'Every ' + deploymentFrequency + ' days'
              if (deploymentFrequency < 5) { //More than once per week (5 working days)
                color = 'green'
                doraClassification = 'Elite'
              } else if (deploymentFrequency >= 5 && deploymentFrequency <= 30) { //Once per week to once per month
                color = 'yellow'
                doraClassification = 'High'
              } else if (deploymentFrequency > 30 && deploymentFrequency <= 180) { //Once per month to once every 6 months
                color = 'red'
                doraClassification = 'Medium'
              } else {
                color = 'red'
                doraClassification = 'Low'
              }
            }

            let markdown = '## DORA Metric: Deployment Frequency\n' +
              '- Workflow Name: ' + workflowId + '\n' +
              '- Job Name: ' + jobName + '\n' +
              '- Deployment Frequency: ' + deploymentFrequencyString + '\n' +
              '- Deployment Frequency Percentage: ' + deploymentFrequencyPercentage + '%\n\n' +
              'You deployed _' + jobName + '_ **' + productWorkflowRuns.length + ' times** in the last ' + numberOfDays + ' days.\n' +
              'Of these ' + numberOfDays + ' days, you deployed on **' + uniqueDates.length + ' days** excluding non-working days.\n\n' +
              'There are **' + numberOfWorkingDays + ' working days** in the last ' + numberOfDays + ' days.\n' +
              'This is **' + doraClassification + '** deployment frequency.\n\n' +
              '## DORA Classification: ' + doraClassification + '\n' +
              '![Deployment Frequency](https://badgen.net/badge/frequency/' + encodeURIComponent(deploymentFrequencyString) + '/' + color + '?icon=github&label=Deployment%20frequency)'

            core.exportVariable('MARKDOWN', markdown)

      - name: 'Create job summary'
        run: |
          echo "${{ env.MARKDOWN }}" >> $GITHUB_STEP_SUMMARY
