name: Deployment Frequuency

on:
  workflow_dispatch:
    inputs: 
      repo:
        description: 'Repository name'
        required: true
        default: 'dora'
      workflowname:
        description: 'Workflow name of yaml filename'
        required: true 
        type: string
      jobname:
        description: 'Job name responsible for production deployment'
        type: string
      numberOfDays:
        description: 'Number of days to check for deployment frequency'
        type: integer
        default: 30



jobs:
  calculate-frequency:
    runs-on: ubuntu-latest
    steps:
      - name: 'Get Workflows and Jobs'
        uses: actions/github-script@v6
        with:
          script: |

            let productWorkflowRuns = []
            let eligibleWorkflowsRuns = []
            let completionDates = []
            let uniqueDates = []
            let color = 'red'
            let numberOfDays =  inputs.numberOfDays 

            if (numberOfDays < 30) {
              numberOfDays = 30
            }

            let earliestDate = new Date() - numberOfDays * 24 * 60 * 60 * 1000
            console.log('Earliest date: ' + earliestDate)

            const workflowRuns = await github.rest.actions.listWorkflowRuns({
                owner: context.repo.owner,
                repo: inputs.repo,
                workflow_id: inputs.workflowName,
              });

            workflowRuns.data.workflow_runs.forEach((workflowRun) => {
              if (workflowRun.created_at > earliestDate) {
                eligibleWorkflowsRuns.push(workflowRun)
                completionDates.push(new Date(workflowRun.completed_at).toISOString().split('T')[0])
              }
            })

            if(!${{ inputs.jobName }}){
              productWorkflowRuns.push(eligibleWorkflowsRuns)
            }else{
              completionDates = []
              for (const workflowRun of eligibleWorkflowsRuns.data.workflow_runs) {
                const jobs = await github.rest.actions.listJobsForWorkflowRun({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  run_id: workflowRun.id,
                });
                
                const filteredProductionJob = jobs.data.jobs.filter(job => job.name === ${{ inputs.jobname }})

                if (filteredProductionJob.length > 0 && filteredProductionJob[0].conclusion === 'success') {
                  productWorkflows.push(workflowRun)
                  completionDates.push(new Date(workflowRun.completed_at).toISOString().split('T')[0])
                }
              }
            }
            // Remove duplicate dates
            uniqueDates = [...new Set(completionDates)]
            console.log('Unique dates: ' + uniqueDates)

            let deploymentFrequency = uniqueDates.length / numberOfDays
            console.log('Deployment frequency: ' + deploymentFrequency)
            let deploymentFrequencyPercentage = deploymentFrequency * 100
            let deploymentFrequencyString = ''
            console.log('Deployment frequency percentage: ' + deploymentFrequencyPercentage + '%')
            if (deploymentFrequency > 1) {
              deploymentFrequencyString = 'Multiple deployments per day'
              color = 'green'
            } else if (deploymentFrequency = 1) {
              deploymentFrequencyString = 'Daily'
              color = 'green'
            } else {
              deploymentFrequency = 1 / deploymentFrequency
              deploymentFrequency = Math.round(deploymentFrequency * 100)
              deploymentFrequencyString = 'Every' + deploymentFrequency + 'days'
              if (deploymentFrequency < 4) {
                color = 'yellow'
              } else {
                color = 'red'
              }
            }

            let markdown = `## Workflow Name: ${{ inputs.workflowName }}\n` +
              `## Job Name: ${{ inputs.jobName }}\n` +
              `## Deployment Frequency: ${deploymentFrequencyString}\n` +
              `## Deployment Frequency Percentage: ${deploymentFrequencyPercentage}%\n` +
              `## Number of days: ${numberOfDays}\n` +
              `## Color: ${color}\n` +
              `![Deployment Frequency](https://badgen.net/badge/frequency/${encodeURIComponent(deploymentFrequencyString)}/${color}?icon=github&label=Deployment%20frequency)`

              echo "::set-output name=markdown::${markdown}"
              echo "${markdown}" >> $GITHUB_STEP_SUMMARY

            const artifact = {
              name: 'deployment-frequency',
              path: 'deployment-frequency.txt',
              contents: uniqueDates.join('\n')
            }
      - name: 'Upload artifact'
        uses: actions/upload-artifact@v2
        with:
          name: deployment-frequency
          path: deployment-frequency.txt




